#include <bits/stdc++.h>
#define pb push_back
using namespace std;
const int maxn = 2e5+7;
vector<int>fac[maxn],p[maxn];
int l[maxn],r[maxn],a[maxn],c[maxn],ans[maxn],last[maxn],head[maxn];
bool vis[maxn];
struct query{
    int l,r,id;
}q[maxn];
bool cmp(const query &a,const query &b){
    return a.l<b.l;
}
int lowbit(int x){
    return x&(-x);
}
void add(int i,int val){
    while(i<=maxn){
        c[i]+=val;
        i+=lowbit(i);
    }
}
int sum(int x){
    int res = 0;
    while(x>0){
        res+=c[x];
        x-=lowbit(x);
    }
    return res;
}
void ini(){
    for(int i=2;i<=maxn;++i){
        fac[i].pb(i);
        if(!vis[i]){
            for(int j=2*i;j<=maxn;j+=i){
                vis[j] = true;
                fac[j].pb(i);
            }
        }
    }
}//分解质因数
int main(){
    int n,m;
    ini();
    while(~scanf("%d%d",&n,&m)&&n&&m){
        for(int i=1;i<=maxn;++i){//初始化
            c[i] = 0;
            last[i] = 0;
            head[i] = n+1;
            p[i].clear();
        }
        for(int i=1;i<=n;++i)scanf("%d",&a[i]);
        for(int i=1;i<=m;++i){
            scanf("%d%d",&q[i].l,&q[i].r);
            q[i].id = i;
        }
        sort(q+1,q+1+m,cmp);
        for(int i=1;i<=n;++i){//找寻一个数互质的左区间
            int pos = 0;
            for(auto &it : fac[a[i]]){//邻接表的一种方便的遍历方式
                pos = max(last[it],pos);
                last[it] = i;
            }
            l[i] = pos + 1;
            p[l[i]].pb(i);
        }
        for(int i=n;i;--i){找互质的右区间
            int pos = n+1;
            for(auto &it : fac[a[i]]){
                pos = min(head[it],pos);
                head[it] = i;
            }
            r[i] = pos - 1;
        }
     /*   for(int i=1;i<=n;++i){
            cout << l[i]<<" "<<r[i]<<endl;
        }*/
        int cur = 1;
        for(int i=1;i<=n;++i){
            for(auto &it : p[i]){
                add(it,1);
                add(r[it]+1,-1);
            }
            while(cur<=m&&q[cur].l==i){
                ans[q[cur].id] = sum(q[cur].r)-sum(q[cur].l-1);
                cur++;
            }
            add(i,-1);
            add(r[i]+1,1);
        }
        for(int i=1;i<=m;++i){
            printf("%d\n",ans[i]);
        }
    }
    return 0;
}
